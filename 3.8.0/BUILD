# LLVM 10.0.0.
package(default_visibility = ["//visibility:public"])

licenses(["notice"])

cc_library(
    name = "3.8.0",
    data = select({
        "//:darwin": ["@clang-llvm-3.8.0-x86_64-apple-darwin//:libdir"],
        "//conditions:default": [
            "@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:libdir",
        ],
    }),
    defines = [
        "__STDC_CONSTANT_MACROS",
        "__STDC_LIMIT_MACROS",
    ],
    linkopts = select({
        # llvm-config --ldflags
        "//:darwin": [
            "-Wl,-rpath,$(location @clang-llvm-3.8.0-x86_64-apple-darwin//:libdir)/",
            "-L$(location @clang-llvm-3.8.0-x86_64-apple-darwin//:libdir)/",
            "-Wl,-search_paths_first",
            "-Wl,-headerpad_max_install_names",
        ],
        "//conditions:default": [
            "-L$(location @clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:libdir)/",
        ],
    }) + select({
        # llvm-config --system-libs
        "//:darwin": [
            "-lcurses",
            "-lpthread",
            "-lz",
            "-lm",
        ],
        "//conditions:default": [
            "-lrt",
            "-ldl",
            "-lpthread",
            "-lm",
        ],
    }) + [
        # clang libs
        "-lclangARCMigrate",
        "-lclangFrontend",
        "-lclangFrontendTool",
        "-lclangDriver",
        "-lclangSerialization",
        "-lclangCodeGen",
        "-lclangParse",
        "-lclangSema",
        "-lclangRewriteFrontend",
        "-lclangRewrite",
        "-lclangStaticAnalyzerFrontend",
        "-lclangStaticAnalyzerCheckers",
        "-lclangStaticAnalyzerCore",
        "-lclangAnalysis",
        "-lclangEdit",
        "-lclangAST",
        "-lclangASTMatchers",
        "-lclangLex",
        "-lclangBasic",
        "-lclangTooling",
        "-lclangToolingCore",
        # llvm-config --libs
        "-lLLVMLTO",
        "-lLLVMObjCARCOpts",
        "-lLLVMSymbolize",
        "-lLLVMDebugInfoPDB",
        "-lLLVMDebugInfoDWARF",
        "-lLLVMXCoreDisassembler",
        "-lLLVMXCoreCodeGen",
        "-lLLVMXCoreDesc",
        "-lLLVMXCoreInfo",
        "-lLLVMXCoreAsmPrinter",
        "-lLLVMSystemZDisassembler",
        "-lLLVMSystemZCodeGen",
        "-lLLVMSystemZAsmParser",
        "-lLLVMSystemZDesc",
        "-lLLVMSystemZInfo",
        "-lLLVMSystemZAsmPrinter",
        "-lLLVMSparcDisassembler",
        "-lLLVMSparcCodeGen",
        "-lLLVMSparcAsmParser",
        "-lLLVMSparcDesc",
        "-lLLVMSparcInfo",
        "-lLLVMSparcAsmPrinter",
        "-lLLVMPowerPCDisassembler",
        "-lLLVMPowerPCCodeGen",
        "-lLLVMPowerPCAsmParser",
        "-lLLVMPowerPCDesc",
        "-lLLVMPowerPCInfo",
        "-lLLVMPowerPCAsmPrinter",
        "-lLLVMNVPTXCodeGen",
        "-lLLVMNVPTXDesc",
        "-lLLVMNVPTXInfo",
        "-lLLVMNVPTXAsmPrinter",
        "-lLLVMMSP430CodeGen",
        "-lLLVMMSP430Desc",
        "-lLLVMMSP430Info",
        "-lLLVMMSP430AsmPrinter",
        "-lLLVMMipsDisassembler",
        "-lLLVMMipsCodeGen",
        "-lLLVMMipsAsmParser",
        "-lLLVMMipsDesc",
        "-lLLVMMipsInfo",
        "-lLLVMMipsAsmPrinter",
        "-lLLVMHexagonDisassembler",
        "-lLLVMHexagonCodeGen",
        "-lLLVMHexagonAsmParser",
        "-lLLVMHexagonDesc",
        "-lLLVMHexagonInfo",
        "-lLLVMCppBackendCodeGen",
        "-lLLVMCppBackendInfo",
        "-lLLVMBPFCodeGen",
        "-lLLVMBPFDesc",
        "-lLLVMBPFInfo",
        "-lLLVMBPFAsmPrinter",
        "-lLLVMARMDisassembler",
        "-lLLVMARMCodeGen",
        "-lLLVMARMAsmParser",
        "-lLLVMARMDesc",
        "-lLLVMARMInfo",
        "-lLLVMARMAsmPrinter",
        "-lLLVMAMDGPUCodeGen",
        "-lLLVMAMDGPUAsmParser",
        "-lLLVMAMDGPUDesc",
        "-lLLVMAMDGPUUtils",
        "-lLLVMAMDGPUInfo",
        "-lLLVMAMDGPUAsmPrinter",
        "-lLLVMAArch64Disassembler",
        "-lLLVMAArch64CodeGen",
        "-lLLVMAArch64AsmParser",
        "-lLLVMAArch64Desc",
        "-lLLVMAArch64Info",
        "-lLLVMAArch64AsmPrinter",
        "-lLLVMAArch64Utils",
        "-lLLVMMIRParser",
        "-lLLVMLibDriver",
        "-lLLVMOption",
        "-lLLVMTableGen",
        "-lLLVMLineEditor",
        "-lLLVMX86Disassembler",
        "-lLLVMX86AsmParser",
        "-lLLVMX86CodeGen",
        "-lLLVMSelectionDAG",
        "-lLLVMAsmPrinter",
        "-lLLVMX86Desc",
        "-lLLVMMCDisassembler",
        "-lLLVMX86Info",
        "-lLLVMX86AsmPrinter",
        "-lLLVMX86Utils",
        "-lLLVMMCJIT",
        "-lLLVMPasses",
        "-lLLVMipo",
        "-lLLVMVectorize",
        "-lLLVMLinker",
        "-lLLVMIRReader",
        "-lLLVMAsmParser",
        "-lLLVMDebugInfoCodeView",
        "-lLLVMInterpreter",
        "-lLLVMCodeGen",
        "-lLLVMScalarOpts",
        "-lLLVMInstCombine",
        "-lLLVMInstrumentation",
        "-lLLVMProfileData",
        "-lLLVMBitWriter",
        "-lLLVMOrcJIT",
        "-lLLVMTransformUtils",
        "-lLLVMExecutionEngine",
        "-lLLVMTarget",
        "-lLLVMAnalysis",
        "-lLLVMRuntimeDyld",
        "-lLLVMObject",
        "-lLLVMMCParser",
        "-lLLVMBitReader",
        "-lLLVMMC",
        "-lLLVMCore",
        "-lLLVMSupport",
    ],
    deps = select({
        "//:darwin": [
            "@clang-llvm-3.8.0-x86_64-apple-darwin//:headers",
            "@clang-llvm-3.8.0-x86_64-apple-darwin//:libs",
        ],
        "//conditions:default": [
            "@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:headers",
            "@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:static_libs",
        ],
    }),
)


genrule(
    name = "make_clang",
    srcs = select({
        "//:darwin": ["@clang-llvm-3.8.0-x86_64-apple-darwin//:clang"],
        "//conditions:default": ["@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:clang"],
    }),
    outs = ["clang"],
    cmd = "cp $< $@ && chmod +x $@",
)

genrule(
    name = "make_clang++",
    srcs = select({
        "//:darwin": ["@clang-llvm-3.8.0-x86_64-apple-darwin//:clang++"],
        "//conditions:default": ["@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:clang++"],
    }),
    outs = ["clang++"],
    cmd = "cp $< $@ && chmod +x $@",
)

genrule(
    name = "make_clang-3.8",
    srcs = select({
        "//:darwin": ["@clang-llvm-3.8.0-x86_64-apple-darwin//:clang"],
        "//conditions:default": ["@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:clang"],
    }),
    outs = ["clang-3.8"],
    cmd = "cp $< $@ && chmod +x $@",
)

genrule(
    name = "make_opt",
    srcs = select({
        "//:darwin": ["@clang-llvm-3.8.0-x86_64-apple-darwin//:opt"],
        "//conditions:default": ["@clang-llvm-3.8.0-x86_64-linux-gnu-ubuntu-16.04//:opt"],
    }),
    outs = ["opt"],
    cmd = "cp $< $@ && chmod +x $@",
)
